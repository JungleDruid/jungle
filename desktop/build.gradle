apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "net.natruid.jungle.desktop.MainKt"
project.ext.assetsDir = new File("../core/assets")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

task zipAssets(type: Zip) {
    delete "../publish"
    from "${assetsDir}"
    include "**/*"
    archiveName "assets.zip"
    destinationDir(file("../publish"))
}

jar {
    archiveName "Jungle-${version}.jar"
    destinationDir(file("../publish"))
    from {
        files(sourceSets.main.output.classesDirs)
        files(sourceSets.main.output.resourcesDir)
        exclude "assets/"
        configurations.compile.collect {
            zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

jar.dependsOn(zipAssets)
